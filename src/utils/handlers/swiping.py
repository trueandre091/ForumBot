import re
import sqlite3
import json

from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram import F
from random import choice, shuffle

from utils.fsm.states import ContactForm
from utils.bot import dp, bot
from utils.config import load_config
from view.text import get_message
from utils.fn import get_username_by_id, get_contacts, get_meetings_times
import utils.db.database as db
from view.keyboard import get_accept_kb, main_kb, times_kb, dates_keyboard, next_last_kb, zones_inline_kb

# –ü–æ–ª—É—á–∞–µ–º –∑–æ–Ω—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
config = load_config()
zones = config['meeting']['zones']

users = dict()


class Swipe:
    def __init__(self, msg: Message, items: list[list]):
        self.msg = msg
        shuffle(items)
        self.items = items
        self.size = len(items)
        self.index = 0
        self.telegram = 0
        users[msg.from_user.id] = self

    async def reply(self):
        self.msg = await self.msg.message.edit_text(text=self.items[self.index][0], parse_mode="HTML",
                                                    reply_markup=next_last_kb)
        if len(self.items[self.index][0]) > 8:
            self.telegram = self.items[self.index][1]

    async def next(self, clb):
        text_before = self.items[self.index][0]
        self.index = (self.index + 1) % self.size
        if text_before == self.items[self.index][0]:
            await clb.answer("–ö–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞!")
        else:
            await clb.message.edit_text(text=self.items[self.index][0], parse_mode="HTML", reply_markup=next_last_kb)
            if len(self.items[self.index][0]) > 8:
                self.telegram = self.items[self.index][1]

    async def back(self, clb):
        text_before = self.items[self.index][0]
        self.index = (self.index - 1) % self.size
        if text_before == self.items[self.index][0]:
            await clb.answer("–ö–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞!")
        else:
            await clb.message.edit_text(text=self.items[self.index][0], parse_mode="HTML", reply_markup=next_last_kb)
            if len(self.items[self.index][0]) > 8:
                self.telegram = self.items[self.index][1]

    async def choose(self, clb: Message, meeting_id, date_time):
        meeting = await db.get_meeting_by_id(meeting_id)
        telegram1, telegram2 = get_contacts(clb, meeting)
        username1, username2 = await get_username_by_id(telegram1), await get_username_by_id(telegram2)
        contact1 = await db.get_contact_by_telegram(telegram1)
        kb = get_accept_kb(meeting_id)

        company = f"–∫–æ–º–ø–∞–Ω–∏–∏ {contact1['company_name']}" if contact1['company_name'] != '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' else ""
        description = f"\n–û–ø–∏—Å–∞–Ω–∏–µ: {contact1['description']} " if contact1['description'] != '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' else ""

        txt = (
            f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í–∞–º –ø–æ—Å—Ç—É–ø–∏–ª–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è üó®Ô∏è\n"
            f"<b>{date_time[0]} –Ω–æ—è–±—Ä—è {date_time[1]}</b>\n"
            f"{contact1['contact_position']} {company} {contact1['contact_name']} "
            f"{description}\n\n"
            f"–¢–µ–ª–µ–≥—Ä–∞–º: @{await get_username_by_id(contact1['telegram'])}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {contact1['phone']}\n"
        )
        try:
            await bot.send_message(chat_id=str(self.items[self.index][1]), text=txt, reply_markup=kb, parse_mode="HTML")
            await self.msg.edit_text(text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {self.items[self.index][0]}\n\n"
                                          f"<b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ</b> @{username2}",
                                     parse_mode="HTML")
        except:
            await self.msg.edit_text(text=f"<b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ</b> @{username2}"
                                          f"\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–µ—Ç–∏–ª –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π.",
                                     parse_mode="HTML")
            await db.delete_contact_by_telegram(self.items[self.index][1])
        finally:
            await self.msg.answer(text=get_message('bot_info'), parse_mode="HTML", reply_markup=main_kb)

        users.pop(self.msg.from_user.id, None)


async def reply_swipe(msg: CallbackQuery, items: list):
    if not items:
        await msg.answer("–£—á–∞—Å—Ç–Ω–∏–∫–∏ –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!", show_alert=True)
        return
    swp = Swipe(msg, items)
    await swp.reply()


@dp.callback_query(F.data == "swipe.next")
async def swipe_next(clb: CallbackQuery):
    swp = users.get(clb.from_user.id)
    if not swp:
        await clb.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /main.")
        return
    await swp.next(clb)


@dp.callback_query(F.data == "swipe.back")
async def swipe_back(clb: CallbackQuery):
    swp = users.get(clb.from_user.id)
    if not swp:
        await clb.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /main.")
        return
    await swp.back(clb)


@dp.callback_query(StateFilter(ContactForm.set_meeting), F.data == "swipe.choose")
async def swipe_choose_contact(clb: CallbackQuery, state: FSMContext):
    swp = users.get(clb.from_user.id)
    if not swp:
        await clb.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /main.")
        return
        
    user = await db.get_contact_by_telegram(str(swp.telegram))
    meeting_times = json.loads(user["meeting_times"])
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–∞ –≤—Å—Ç—Ä–µ—á –¥–ª—è –≤—Å–µ—Ö –¥–∞—Ç
    times_dict = get_meetings_times(meeting_times)
    await state.update_data(times_dict=times_dict)
    await state.update_data(telegram2=swp.telegram)

    config = load_config()
    
    text = "<b>–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á–∏:</b>\n\n<b>–°–≤–æ–±–æ–¥–Ω—ã–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º—è:</b>\n"
    for date in config['meeting']['dates']:
        times = times_dict.get(date, [])
        text += f"üóìÔ∏è {date}: {', '.join(times)}\n\n"

    if user["speaker_place"]:
        text = f"<b>–°–ø–∏–∫–µ—Ä —Ñ–æ—Ä—É–º–∞</b>\n" + text
        text += f"<b>–ú–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏</b>: {user['speaker_place']}"
        message = await clb.message.edit_text(
            text=text,
            parse_mode="HTML",
            reply_markup=dates_keyboard
        )
        await state.update_data(place=user["speaker_place"])
    else:
        text += "<b>–ó–æ–Ω—ã –≤—Å—Ç—Ä–µ—á</b>:\n"
        for zone in config['meeting']['zones']:
            text += f"{zone}\n"
            
        message = await clb.message.edit_text(
            text=text,
            parse_mode="HTML",
            reply_markup=zones_inline_kb
        )
        await state.set_state(ContactForm.set_place)


@dp.callback_query(StateFilter(ContactForm.set_place))
async def swipe_choose_place(clb: CallbackQuery, state: FSMContext):
    place = clb.data
    await state.update_data(place=place)
    message = await clb.message.edit_reply_markup(reply_markup=dates_keyboard)
    await state.set_state(ContactForm.set_meeting)


@dp.callback_query(lambda c: c.data in [date.split()[0] for date in load_config()['meeting']['dates']])
async def swipe_choose_date(clb: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    times_dict = data["times_dict"]
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–Ω—É—é –¥–∞—Ç—É –ø–æ —á–∏—Å–ª—É
    config = load_config()
    selected_date = next(date for date in config['meeting']['dates'] 
                        if date.startswith(clb.data))
    
    times = times_dict.get(selected_date, [])

    await state.update_data(date=selected_date)
    message = await clb.message.edit_reply_markup(reply_markup=times_kb(times))

    await state.set_state(ContactForm.time_choose)


@dp.callback_query(StateFilter(ContactForm.time_choose), lambda c: re.match(r'^[0-2][0-9]:[0-5][0-9]$', c.data))
async def swipe_choose_time(clb: CallbackQuery, state: FSMContext):
    swp = users.get(clb.from_user.id)
    if not swp:
        await clb.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /main.")
        return

    data = await state.get_data()
    telegram2 = data["telegram2"]

    date = data["date"]
    time = clb.data
    place = data["place"]

    data = {
        "date": date,
        "time": time,
        "contact1_id": str(clb.from_user.id),
        "contact2_id": str(telegram2),
        "place": place,
        "status": -1
    }
    try:
        meeting_id = await db.save_meeting_to_db(data)
    except Exception as e:
        print(e)
        await clb.message.answer(get_message("error"), parse_mode="HTML", reply_markup=ReplyKeyboardRemove())
        return

    await swp.choose(clb, meeting_id, [date, time])
    await state.set_state(ContactForm.main)
