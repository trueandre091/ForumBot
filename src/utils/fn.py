from datetime import datetime
from typing import List, Tuple

from utils.bot import bot
import utils.db.database as db

pattern_datetime = r"^\d{2} \d{2}:[024]0$"
pattern_phone = r"^(\+)?((\d{2,3}) ?\d|\d)(([ -]?\d)|( ?(\d{2,3}) ?)){5,12}\d$"


async def get_username_by_id(user_id: int):
    user = await bot.get_chat(user_id)
    return user.username if user.username else f"{user_id} (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç username)"


def format_time_ranges(hours):
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
    hours = sorted(map(int, [hour for hour in hours if hour != "–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"]))

    ranges = []
    start = hours[0]
    end = hours[0]

    for hour in hours[1:]:
        if hour == end + 1:  # –ï—Å–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π —á–∞—Å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π
            end = hour
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω –≤ —Å–ø–∏—Å–æ–∫, —É–≤–µ–ª–∏—á–∏–≤–∞—è –µ–≥–æ –Ω–∞ 1
            if start == end:
                ranges.append(f"{start}:00-{end + 1}:00")  # –û–¥–∏–Ω —á–∞—Å –æ—Ç start
            else:
                ranges.append(f"{start}:00-{end + 1}:00")  # –î–∏–∞–ø–∞–∑–æ–Ω start-end + 1
            start = hour
            end = hour

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω, —É–≤–µ–ª–∏—á–∏–≤–∞—è –µ–≥–æ –Ω–∞ 1
    if start == end:
        ranges.append(f"{start}:00-{end + 1}:00")
    else:
        ranges.append(f"{start}:00-{end + 1}:00")

    return " ".join(ranges)


def is_time_in_range(time_str, time_range):
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è –∏ –≥—Ä–∞–Ω–∏—Ü—ã –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –≤ –æ–±—ä–µ–∫—Ç—ã datetime
    time = datetime.strptime(time_str, "%H:%M")
    start, end = map(lambda t: datetime.strptime(t, "%H:%M"), time_range.split("-"))

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ –≤—Ä–µ–º—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω
    return start <= time <= end


def get_contacts(clb, meeting) -> list[str, str]:
    if meeting["contact1_id"] == clb.from_user.id:
        telegram2 = meeting["contact2_id"]
        telegram1 = meeting["contact1_id"]
    else:
        telegram2 = meeting["contact1_id"]
        telegram1 = meeting["contact2_id"]
    return [telegram1, telegram2]


async def get_meetings_message(clb, meetings):
    message = ""
    num = 1
    for meeting in meetings:
        telegram1, telegram2 = get_contacts(clb, meeting)
        contact2 = await db.get_contact_by_telegram(telegram2)
        company = f"–∫–æ–º–ø–∞–Ω–∏–∏ {contact2['company_name']}" if contact2['company_name'] != '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' else ""
        description = f"\n–û–ø–∏—Å–∞–Ω–∏–µ: {contact2['description']}" if contact2['description'] != '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' else ""

        message += (
            f"üïë {num}. <b>{meeting['date']} –Ω–æ—è–±—Ä—è {meeting['time']}</b>\n"
            f"<b>–ú–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏: {meeting['place']}</b>\n"
            f"–£—á–∞—Å—Ç–Ω–∏–∫: {contact2['contact_position']} {company} {contact2['contact_name']}\n\n"
        )
        num += 1

    return message


def get_meetings_times(meeting_times_14: List[str], meeting_times_15: List[str]) -> Tuple[List[str], List[str]]:
    def generate_times(hours: List[str]) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Ä–µ–º–µ–Ω –¥–ª—è –∑–∞–¥–∞–Ω–Ω—ã—Ö —á–∞—Å–æ–≤."""
        times = []
        for hour in hours:
            for minute in range(0, 60, 20):
                times.append(f"{hour.zfill(2)}:{minute:02d}")  # zfill –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        return times

    times_14 = sorted(generate_times(meeting_times_14), key=lambda x: (int(x[0:2]) - 10 * 3) + (int(x[3]) // 2))
    times_15 = sorted(generate_times(meeting_times_15), key=lambda x: (int(x[0:2]) - 10 * 3) + (int(x[3]) // 2))
    return times_14, times_15


async def get_card(user):
    meeting_times_14 = user['meeting_times_14'].split(',')
    meeting_times_15 = user['meeting_times_15'].split(',')
    try:
        times_14 = format_time_ranges(meeting_times_14)
    except:
        times_14 = "–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"

    try:
        times_15 = format_time_ranges(meeting_times_15)
    except:
        times_15 = "–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"

    if times_14 and times_15:
        message = (
            f"{user['contact_position']}\n"
            f"{user['contact_name']}\n\n"
            f"–ö–æ–º–ø–∞–Ω–∏—è: {user['company_name']}\n–û–ø–∏—Å–∞–Ω–∏–µ: {user['description']}\n"
            f"–í–µ–±-—Å–∞–π—Ç: {user['website']}\n"
            f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user['phone']}\n"
            f"–¢–µ–ª–µ–≥—Ä–∞–º: @{await get_username_by_id(user['telegram'])}\n\n"
            f"<b>–í—Ä–µ–º–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ –≤—Ä–µ–º—è —Ñ–æ—Ä—É–º–∞:</b>\n"
            f"üóìÔ∏è 14 –Ω–æ—è–±—Ä—è: {times_14}\n"
            f"üóìÔ∏è 15 –Ω–æ—è–±—Ä—è: {times_15}"
        )
        if user["speaker_place"]:
            message = f"<b>–°–ø–∏–∫–µ—Ä —Ñ–æ—Ä—É–º–∞</b>\n" + message
            message += f"\n\n<b>–ú–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏</b>: {user['speaker_place']}"
        return message
